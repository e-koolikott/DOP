.portfolio-chapter-chapter-materials.ng-hide-remove.ng-hide-remove-active, .portfolio-chapter-subchapter-materials.ng-hide-remove.ng-hide-remove-active {
  animation:1s cubic-bezier(.17,.67,.83,.67) ease;
}

.portfolio-chapter-chapter-materials.ng-hide-add-active, .portfolio-chapter-subchapter-materials.ng-hide-add-active {
  animation:1s cubic-bezier(.17,.67,.83,.67) ease;
}

.portfolio-slide.ng-hide {
  height: 0;
  display: block;
}

.portfolio-chapter {
  h2 {
    margin: 0;
  }
  h3 {
    margin: 0;
    margin-top: 4px;
  }
  .md-body-1 {
    margin-bottom: 0;
  }
}

.chapter-title {
  margin: 0;
}


.portfolio-chapter {
  margin-bottom: 20px;

  .md-body-1  {
    font-size: 15px;
    line-height: 22px;
  }
}

.portfolio-chapter-subchapter {
  .md-body-1  {
    font-size: 14px;
    line-height: 22px;
    column-count: 2;
  }
}

.portfolio-chapter-chapter-materials,
.portfolio-chapter-subchapter-materials {
  margin-top: 0px;
  margin-bottom: 0;
  padding-left: 0;
}

/**
 * For the correct positioning of the placeholder element, the dnd-list and
 * it's children must have position: relative
 */
ul[dnd-list],
ul[dnd-list] > li {
  position: relative;
}

/**
 * The dnd-list should always have a min-height,
 * otherwise you can't drop to it once it's empty
 */
ul[dnd-list] {
  min-height: 126px;
  padding-left: 0px;
}

/**
 * The dndDraggingSource class will be applied to
 * the source element of a drag operation. It makes
 * sense to hide it to give the user the feeling
 * that he's actually moving it.
 */
ul[dnd-list] .dndDraggingSource {
  display: none;
}

/**
 * An element with .dndPlaceholder class will be
 * added to the dnd-list while the user is dragging
 * over it.
 */
ul[dnd-list] .dndPlaceholder {
  display: block;
  background-color: #ddd;
  min-height: 100px;
}

/**
 * The dnd-lists's child elements currently MUST have
 * position: relative. Otherwise we can not determine
 * whether the mouse pointer is in the upper or lower
 * half of the element we are dragging over. In other
 * browsers we can use event.offsetY for this.
 */
ul[dnd-list] li {
  display: block;
}

/**
 * Show selected elements in green
 */
ul[dnd-list] li.selected {
  background-color: #dff0d8;
  color: #3c763d;
}
